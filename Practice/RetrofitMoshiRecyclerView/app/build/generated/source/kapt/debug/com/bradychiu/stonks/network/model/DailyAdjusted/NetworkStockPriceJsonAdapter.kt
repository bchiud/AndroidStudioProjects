// Code generated by moshi-kotlin-codegen. Do not edit.
package com.bradychiu.stonks.network.model.DailyAdjusted

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.Double
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION", "RedundantExplicitType",
    "LocalVariableName")
class NetworkStockPriceJsonAdapter(
  moshi: Moshi
) : JsonAdapter<NetworkStockPrice>() {
  private val options: JsonReader.Options = JsonReader.Options.of("1. open", "2. high", "3. low",
      "4. close", "5. adjusted close", "6. volume", "7. dividend amount", "8. split coefficient")

  private val doubleAdapter: JsonAdapter<Double> = moshi.adapter(Double::class.java, emptySet(),
      "open")

  private val longAdapter: JsonAdapter<Long> = moshi.adapter(Long::class.java, emptySet(), "volume")

  override fun toString(): String = buildString(39) {
      append("GeneratedJsonAdapter(").append("NetworkStockPrice").append(')') }

  override fun fromJson(reader: JsonReader): NetworkStockPrice {
    var open: Double? = null
    var high: Double? = null
    var low: Double? = null
    var close: Double? = null
    var adjustedClose: Double? = null
    var volume: Long? = null
    var dividendAmount: Double? = null
    var splitCoefficient: Double? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> open = doubleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("open", "1. open",
            reader)
        1 -> high = doubleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("high", "2. high",
            reader)
        2 -> low = doubleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("low", "3. low",
            reader)
        3 -> close = doubleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("close",
            "4. close", reader)
        4 -> adjustedClose = doubleAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("adjustedClose", "5. adjusted close", reader)
        5 -> volume = longAdapter.fromJson(reader) ?: throw Util.unexpectedNull("volume",
            "6. volume", reader)
        6 -> dividendAmount = doubleAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("dividendAmount", "7. dividend amount", reader)
        7 -> splitCoefficient = doubleAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("splitCoefficient", "8. split coefficient", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return NetworkStockPrice(
        open = open ?: throw Util.missingProperty("open", "1. open", reader),
        high = high ?: throw Util.missingProperty("high", "2. high", reader),
        low = low ?: throw Util.missingProperty("low", "3. low", reader),
        close = close ?: throw Util.missingProperty("close", "4. close", reader),
        adjustedClose = adjustedClose ?: throw Util.missingProperty("adjustedClose",
            "5. adjusted close", reader),
        volume = volume ?: throw Util.missingProperty("volume", "6. volume", reader),
        dividendAmount = dividendAmount ?: throw Util.missingProperty("dividendAmount",
            "7. dividend amount", reader),
        splitCoefficient = splitCoefficient ?: throw Util.missingProperty("splitCoefficient",
            "8. split coefficient", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: NetworkStockPrice?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("1. open")
    doubleAdapter.toJson(writer, value.open)
    writer.name("2. high")
    doubleAdapter.toJson(writer, value.high)
    writer.name("3. low")
    doubleAdapter.toJson(writer, value.low)
    writer.name("4. close")
    doubleAdapter.toJson(writer, value.close)
    writer.name("5. adjusted close")
    doubleAdapter.toJson(writer, value.adjustedClose)
    writer.name("6. volume")
    longAdapter.toJson(writer, value.volume)
    writer.name("7. dividend amount")
    doubleAdapter.toJson(writer, value.dividendAmount)
    writer.name("8. split coefficient")
    doubleAdapter.toJson(writer, value.splitCoefficient)
    writer.endObject()
  }
}
