// Code generated by moshi-kotlin-codegen. Do not edit.
package com.bradychiu.stonks.network.model.DailyAdjusted

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION", "RedundantExplicitType",
    "LocalVariableName")
class NetworkMetadataJsonAdapter(
  moshi: Moshi
) : JsonAdapter<NetworkMetadata>() {
  private val options: JsonReader.Options = JsonReader.Options.of("1. Information", "2. Symbol",
      "3. Last Refreshed", "4. Output Size", "5. Time Zone")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "information")

  override fun toString(): String = buildString(37) {
      append("GeneratedJsonAdapter(").append("NetworkMetadata").append(')') }

  override fun fromJson(reader: JsonReader): NetworkMetadata {
    var information: String? = null
    var symbol: String? = null
    var lastRefreshed: String? = null
    var outputSize: String? = null
    var timeZone: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> information = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("information", "1. Information", reader)
        1 -> symbol = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("symbol",
            "2. Symbol", reader)
        2 -> lastRefreshed = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("lastRefreshed", "3. Last Refreshed", reader)
        3 -> outputSize = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("outputSize",
            "4. Output Size", reader)
        4 -> timeZone = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("timeZone",
            "5. Time Zone", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return NetworkMetadata(
        information = information ?: throw Util.missingProperty("information", "1. Information",
            reader),
        symbol = symbol ?: throw Util.missingProperty("symbol", "2. Symbol", reader),
        lastRefreshed = lastRefreshed ?: throw Util.missingProperty("lastRefreshed",
            "3. Last Refreshed", reader),
        outputSize = outputSize ?: throw Util.missingProperty("outputSize", "4. Output Size",
            reader),
        timeZone = timeZone ?: throw Util.missingProperty("timeZone", "5. Time Zone", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: NetworkMetadata?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("1. Information")
    stringAdapter.toJson(writer, value.information)
    writer.name("2. Symbol")
    stringAdapter.toJson(writer, value.symbol)
    writer.name("3. Last Refreshed")
    stringAdapter.toJson(writer, value.lastRefreshed)
    writer.name("4. Output Size")
    stringAdapter.toJson(writer, value.outputSize)
    writer.name("5. Time Zone")
    stringAdapter.toJson(writer, value.timeZone)
    writer.endObject()
  }
}
